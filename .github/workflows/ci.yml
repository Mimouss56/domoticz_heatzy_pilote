name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.8"

jobs:
  test:
    name: Test Plugin
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ *.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 (Black standard)
        flake8 src/ *.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ *.py
        
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run tests
      run: |
        python test_modular.py
        
    - name: Test plugin import
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            from plugin_modular import create_test_plugin
            plugin = create_test_plugin()
            print('✅ Plugin import successful')
        except Exception as e:
            print(f'❌ Plugin import failed: {e}')
            exit(1)
        "

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety
        
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Dependency security check
      run: |
        # Create a requirements.txt for safety check
        echo "# Plugin has no external dependencies" > requirements.txt
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation files
      run: |
        # Check that all required documentation exists
        required_files=(
          "README.md"
          "README_FR.md" 
          "CHANGELOG.md"
          "ARCHITECTURE.md"
          "DEV_CONFIG.md"
        )
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
    - name: Check README links
      run: |
        # Basic check for broken internal links
        grep -n "\]\(" README.md | while read -r line; do
          echo "Checking: $line"
        done
        
    - name: Validate Python docstrings
      run: |
        python3 -c "
        import ast
        import os
        
        def check_docstrings(file_path):
            with open(file_path, 'r') as f:
                tree = ast.parse(f.read())
            
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if not ast.get_docstring(node):
                        print(f'⚠️  Missing docstring: {node.name} in {file_path}')
        
        for root, dirs, files in os.walk('src'):
            for file in files:
                if file.endswith('.py'):
                    file_path = os.path.join(root, file)
                    check_docstrings(file_path)
        "

  compatibility:
    name: Domoticz Compatibility
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Test plugin structure
      run: |
        # Check plugin.py structure for Domoticz compatibility
        python3 -c "
        import re
        
        # Read plugin file
        with open('plugin_modular.py', 'r') as f:
            content = f.read()
        
        # Check for required Domoticz elements
        required_patterns = [
            r'<plugin.*key=.*name=.*author=.*version=.*>',
            r'def onStart\(\):',
            r'def onStop\(\):',
            r'def onCommand\(',
            r'def onHeartbeat\(\):',
            r'global _plugin'
        ]
        
        for pattern in required_patterns:
            if not re.search(pattern, content):
                print(f'❌ Missing required Domoticz pattern: {pattern}')
                exit(1)
            else:
                print(f'✅ Found required pattern: {pattern}')
        
        print('✅ Plugin structure compatible with Domoticz')
        "
        
    - name: Check Python 3.6 compatibility
      run: |
        # Domoticz often runs on older Python versions
        python3 -m py_compile plugin_modular.py
        for file in src/*.py; do
          python3 -m py_compile "$file"
        done
        echo "✅ All files compile successfully"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install memory profiler
      run: |
        pip install memory-profiler psutil
        
    - name: Memory usage test
      run: |
        python3 -c "
        import tracemalloc
        import sys
        sys.path.insert(0, 'src')
        
        tracemalloc.start()
        
        # Import and create plugin
        from plugin_modular import create_test_plugin
        plugin = create_test_plugin()
        
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()
        
        print(f'Current memory usage: {current / 1024 / 1024:.2f} MB')
        print(f'Peak memory usage: {peak / 1024 / 1024:.2f} MB')
        
        # Fail if memory usage is too high
        if peak > 50 * 1024 * 1024:  # 50 MB
            print('❌ Memory usage too high')
            exit(1)
        else:
            print('✅ Memory usage acceptable')
        "
        
    - name: Import time test
      run: |
        python3 -c "
        import time
        import sys
        sys.path.insert(0, 'src')
        
        start_time = time.time()
        from plugin_modular import create_test_plugin
        import_time = time.time() - start_time
        
        print(f'Import time: {import_time:.3f} seconds')
        
        # Fail if import takes too long
        if import_time > 5.0:  # 5 seconds
            print('❌ Import time too slow')
            exit(1)
        else:
            print('✅ Import time acceptable')
        "